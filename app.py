import os
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
from dotenv import load_dotenv
from openai import OpenAI

# Cargar variables del entorno (.env o Replit Secrets)
load_dotenv()

app = Flask(__name__)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BUSINESS_NAME = os.getenv("BUSINESS_NAME", "Global iPhone")
HUMAN_NUMBER = os.getenv("WHATSAPP_HUMAN_NUMBER", "")

client = OpenAI(api_key=OPENAI_API_KEY)


# --- Reglas r√°pidas (respuestas instant√°neas) ---
def quick_rules(user_text: str):
    t = user_text.lower().strip()

    if t in ("hola", "menu", "men√∫", "inicio", "ayuda"):
        return (f"Hola üëã soy el asistente de *{BUSINESS_NAME}*.\n"
                "Eleg√≠ una opci√≥n o escrib√≠ tu consulta:\n"
                "1Ô∏è‚É£ Precios y stock\n"
                "2Ô∏è‚É£ Promos & cuotas (Payway)\n"
                "3Ô∏è‚É£ Env√≠os y retiros\n"
                "4Ô∏è‚É£ Garant√≠a y cambios\n"
                "5Ô∏è‚É£ Hablar con una persona")

    if t in ("1", "precios", "precio", "stock", "lista"):
        return ("Decime el *modelo* y si lo quer√©s *sellado o usado* "
                "(ej: ‚ÄúiPhone 15 Pro 256 sellado‚Äù).")

    if t in ("2", "promos", "promo", "cuotas", "payway"):
        return (
            "Promo ‚≠ê *3 cuotas sin inter√©s*.\n"
            "Con inter√©s: 6 y 9 cuotas v√≠a Payway.\n"
            "Decime el *monto* y la *cantidad de cuotas* y te calculo al toque."
        )

    if t in ("3", "envio", "env√≠os", "retiro", "retiros", "entrega"):
        return ("Entregamos en *C√≥rdoba* y *Catamarca*. "
                "Pod√©s retirar o pedir env√≠o a domicilio üöö.")

    if t in ("4", "garantia", "garant√≠a", "cambios", "devolucion",
             "devoluci√≥n"):
        return (
            "Todos nuestros equipos tienen *garant√≠a escrita*. "
            "Si surge un problema real de f√°brica, *te cambiamos el equipo*.")

    if t in ("5", "humano", "asesor", "vendedor"):
        if HUMAN_NUMBER:
            return (f"Te derivo con un asesor humano üëâ {HUMAN_NUMBER}\n"
                    "Tambi√©n pod√©s seguir consultando conmigo ü§ñ.")
        else:
            return (
                "¬°Listo! Aviso a un asesor humano para que te escriba en breve."
            )

    return None


# --- Prompt de sistema para ChatGPT ---
SYSTEM_PROMPT = f"""
Sos un asesor de ventas de {BUSINESS_NAME}. Respond√© en espa√±ol rioplatense, de forma clara y amable.
Objetivo: ayudar al cliente a comprar o resolver dudas sobre productos Apple.
Nunca inventes precios; ped√≠ modelo y condici√≥n (sellado/usado) si falta informaci√≥n.
Pod√©s ofrecer cuotas, garant√≠a, env√≠o y derivar a un humano si lo piden.
Us√° emojis sobrios y vi√±etas si ayudan a la claridad.
"""


def ai_reply(user_text: str):
    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{
            "role": "system",
            "content": SYSTEM_PROMPT
        }, {
            "role": "user",
            "content": user_text
        }],
        temperature=0.3,
    )
    return completion.choices[0].message.content.strip()


@app.route("/", methods=["GET"])
def home():
    return "Bot activo ‚úÖ"


@app.route("/webhook", methods=["GET", "POST"])
def verify_webhook():
    if request.method == "GET":
        # Token de verificaci√≥n que definiste en Meta
        VERIFY_TOKEN = "globalstore123"

        mode = request.args.get("hub.mode")
        token = request.args.get("hub.verify_token")
        challenge = request.args.get("hub.challenge")

        if mode == "subscribe" and token == VERIFY_TOKEN:
            print("‚úÖ Webhook verificado correctamente con Meta")
            return challenge, 200
        else:
            print("‚ùå Token de verificaci√≥n inv√°lido")
            return "Token de verificaci√≥n inv√°lido", 403

    elif request.method == "POST":
        data = request.get_json()
        print("üì© Nuevo mensaje recibido:", data)
        return "EVENT_RECEIVED", 200


@app.route("/whatsapp", methods=["POST"])
def whatsapp_webhook():
    incoming_msg = request.values.get("Body", "").strip()
    resp = MessagingResponse()
    msg = resp.message()

    quick = quick_rules(incoming_msg)
    if quick:
        msg.body(quick)
        return str(resp)

    try:
        answer = ai_reply(incoming_msg)
    except Exception:
        answer = "Tuve un peque√±o error t√©cnico ü§ñ, prob√° de nuevo o escrib√≠ *men√∫*."

    msg.body(answer)
    return str(resp)


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 3000)))
